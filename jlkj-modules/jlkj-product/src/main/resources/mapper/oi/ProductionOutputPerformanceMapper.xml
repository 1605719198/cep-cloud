<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jlkj.product.oi.mapper.ProductionOutputPerformanceMapper">

    <resultMap id="BaseResultMap" type="com.jlkj.product.oi.domain.ProductionOutputPerformance">
            <id property="id" column="id" jdbcType="VARCHAR"/>
            <result property="shiftName" column="shift_name" jdbcType="VARCHAR"/>
            <result property="className" column="class_name" jdbcType="VARCHAR"/>
            <result property="cokeOvenNumber" column="coke_oven_number" jdbcType="INTEGER"/>
            <result property="carbonizationChamberNumber" column="carbonization_chamber_number" jdbcType="INTEGER"/>
            <result property="productionDate" column="production_date" jdbcType="DATE"/>
            <result property="planningProductionTime" column="planning_production_time" jdbcType="TIME"/>
            <result property="actualProductionTime" column="actual_production_time" jdbcType="TIME"/>
            <result property="cokeCurrent" column="coke_current" jdbcType="DECIMAL"/>
            <result property="planningLoadCoalTime" column="planning_load_coal_time" jdbcType="TIME"/>
            <result property="actualLoadCoalTime" column="actual_load_coal_time" jdbcType="TIME"/>
            <result property="coalCurrent" column="coal_current" jdbcType="DECIMAL"/>
            <result property="planningRunCycle" column="planning_run_cycle" jdbcType="DECIMAL"/>
            <result property="actualRunCycle" column="actual_run_cycle" jdbcType="DECIMAL"/>
            <result property="singleHoleProduction" column="single_hole_production" jdbcType="DECIMAL"/>
            <result property="loadingCoal" column="Loading_coal" jdbcType="DECIMAL"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,shift_name,class_name,
        coke_oven_number,carbonization_chamber_number,production_date,
        planning_production_time,actual_production_time,coke_current,
        planning_load_coal_time,actual_load_coal_time,coal_current,
        planning_run_cycle,actual_run_cycle,single_hole_production,
        Loading_coal,create_time
    </sql>

    <select id="getCokePerformanceAnalys" parameterType="com.jlkj.product.oi.dto.dashboardindex.GetCokePlanPerformanceDTO" resultType="java.util.Map">
        select YEAR(production_date) as year, MONTH(production_date) as month, DAY(production_date) as date, SUM(single_hole_production) as yeild
        from t_production_output_performance_manual_bake
        where DATE_FORMAT(DATE_ADD(production_date,INTERVAL 4 HOUR),'%Y-%m-%d') <![CDATA[ >= ]]> #{start_time}
          and DATE_FORMAT(DATE_ADD(production_date,INTERVAL 4 HOUR),'%Y-%m-%d') <![CDATA[ <= ]]> #{end_time}
        group by year, month, date
        order by date asc
    </select>

    <select id="getCokePlanAnalys" parameterType="com.jlkj.product.oi.dto.dashboardindex.GetCokePlanPerformanceDTO" resultType="java.util.Map">
        select b.target_item_name, a.plan_year as year, a.plan_month as month, a.plan_date as date,
        concat(case when a.plan_month <![CDATA[ < ]]> 10 then concat('0', a.plan_month) else a.plan_month end, '-', case when a.plan_date <![CDATA[ < ]]> 10 then concat('0', a.plan_date) else a.plan_date end) as md,
        sum(a.target_item_output) as yeild
        from product_oi_plan_output_date a
            inner join (
                select id, target_item_name from product_oi_parameter_target_item
                union all
                select '123456789' as id, '焦炭' as target_item_name
            ) b on a.target_item_id = b.id
        where (date_format(concat(a.plan_year, '-', a.plan_month, '-', a.plan_date), '%Y-%m-%d') >= #{start_time})
            and (date_format(concat(a.plan_year, '-', a.plan_month, '-', a.plan_date), '%Y-%m-%d') <![CDATA[ <= ]]> #{end_time})
            and b.target_item_name = '焦炭'
        GROUP BY b.target_item_name, a.plan_year, a.plan_month, a.plan_date
        ORDER BY a.plan_date asc
    </select>



    <select id="getCokeOutputAnalysByLevel" parameterType="com.jlkj.product.oi.dto.dashboardindex.GetCokePlanPerformanceDTO" resultType="java.util.Map">
        SELECT materials_code,materials_name, ROUND(SUM(single_hole_production)/1000,3) as yeild
        FROM product_oi_output_performance_manual_bake
        WHERE production_date <![CDATA[ >= ]]> #{start_time}
          AND production_date <![CDATA[ <= ]]> #{end_time}
        GROUP BY materials_code,materials_name
        ORDER BY materials_code,materials_name
    </select>
    <select id="getCokeOutputAnalysByStove" parameterType="com.jlkj.product.oi.dto.dashboardindex.GetCokePlanPerformanceDTO" resultType="java.util.Map">
        SELECT coke_oven_number, ROUND(SUM(single_hole_production)/1000,3) as yeild
        FROM product_oi_output_performance_manual_bake
        WHERE production_date <![CDATA[ >= ]]> #{start_time}
          AND production_date <![CDATA[ <= ]]> #{end_time}
        GROUP BY coke_oven_number
        ORDER BY coke_oven_number
    </select>
    <select id="getProductivity" parameterType="com.jlkj.product.oi.dto.dashboardindex.GetCokePlanPerformanceDTO" resultType="java.util.Map">
        SELECT
            IFNULL(ROUND(SUM(CASE WHEN coke_type = 1 THEN 1 ELSE 0 END) / COUNT(*) * 100, 3),0.0) AS gxj,
            IFNULL(100 - ROUND(SUM(CASE WHEN coke_type = 1 THEN 1 ELSE 0 END) / COUNT(*) * 100, 3),0.0) AS sxj
        FROM product_oi_output_performance_manual_bake a
        WHERE a.production_date <![CDATA[ >= ]]> #{start_time}
          AND a.production_date <![CDATA[ <= ]]> #{end_time}
    </select>



</mapper>
